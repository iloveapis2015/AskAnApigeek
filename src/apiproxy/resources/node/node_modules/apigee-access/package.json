{
  "name": "apigee-access",
  "version": "1.3.0",
  "description": "Provides access to Apigee-specific functionality",
  "main": "lib/index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/apigee/apigee-access.git"
  },
  "keywords": [
    "apigee"
  ],
  "author": {
    "name": "gbrail",
    "email": "greg@apigee.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/apigee/apigee-access/issues"
  },
  "homepage": "https://github.com/apigee/apigee-access",
  "readme": "# apigee-access\n\nThe apigee-access module allows Node.js applications running on the Apigee Edge platform\na way to access Apigee-specific functionality. You can use this module to:\n\n* Access and modify \"flow variables\" within the Apigee message context.\n* Retrieve sensitive data from the the secure store.\n* Use the built-in distributed cache.\n* Use the built-in distributed quota service.\n* Use the OAuth service.\n\nUse this module when you deploy a Node.js program to Apigee Edge to access\nApigee-specific functionality. You can use it to\nbuild an application that is optimized for Apigee Edge, or it may be used\nto build higher-level functionality.\n\nTo support local development and testing, this module works in a\nlocal mode with no dependencies on Apigee functionality. When deployed to\nApigee Edge, this functionality is replaced with native Apigee functionality.\n\nThis module is intended for use by developers who intend to primarily deploy\nto Apigee. For a more comprehensive set of tools that may be used in a\nvariety of environments both inside and outside Apigee, please see our suite\nof \"Volos\" modules:\n\n[https://www.npmjs.org/search?q=volos](https://www.npmjs.org/search?q=volos)\n\n### When Should I Use This?\n\nUse this module:\n\n* When you are an Apigee Edge user who is combining the traditional policy-based\nconfiguration of an API proxy with Node.js code.\n\n* When you are an Apigee Edge user who wants to take advantage of the built-in\ndistributed cache, quota, OAuth, and analytics available on the platform.\n\n### When Should I Not Use This?\n\nDo not use this module:\n\n* If you are not deploying to Apigee Edge, then this module makes no sense.\n\n* If you don't know what we're talking about so far, then you don't need\nthis module.\n\n## Behavior when Deployed to Apigee Edge\n\n* *Variable Access*: Variables set by other Apigee Edge policies are visible\nto this module, and variables added or modified by this module are visible\nto subsequent policies.\n\n* *Cache*: Items placed in the cache are visible to all instances of the\napplication deployed to Apigee Edge.\n\n## Behavior when Running Outside Apigee\n\n* *Variable Access*: Variables are only visible to the current Node.js\napplication. A (small) set of pre-defined variables is also populated for\ntesting.\n\n* *Cache*: Items in the cache are only visible to the current Node.js\napplication.\n\n* *Secure Store*: The secure store service will fail with an error when\nused outside Apigee Edge.\n\n* *Quota*: The quota service will fail with an error when used\noutside Apigee Edge.\n\n* *OAuth*: The OAuth service will fail with an error when used\noutside Apigee Edge.\n\n## Example\n\nWhen creating an API proxy in Apigee, it is common to set\nvariables that can be used to pass information from one policy to the next.\n\nImagine that an Edge policy running on the request path has set a variable\ncalled \"AuthenticatedUserId\". Using this module, you may access that\nvariable as follows:\n\n    var http = require('http');\n    var apigee = require('apigee-access');\n\n    http.createServer(function (request, response) {\n      var userId = apigee.getVariable(request, 'AuthenticatedUserId');\n      console.log('Authenticated Apigee User ID is %s', userId);\n      response.writeHead(200, {'Content-Type': 'text/plain'});\n      response.end('Hello World\\n');\n    }).listen(8124);\n\n    console.log('Server running at http://127.0.0.1:8124/');\n\n# Detailed Documentation\n\n## Methods\n\nThe module supports the following methods. Note that some methods require a request object that came from the http module.\nThe methods are described in more detail in the following sections.\n\n    getVariable(request, name);\n    setVariable(request, name, value);\n    setIntVariable(request, name, value);\n    deleteVariable(request, name);\n    getCache(name);\n    getQuota(options);\n    getMode();\n\nAnd the following constant properties:\n\n    APIGEE_MODE = 'apigee';\n    STANDALONE_MODE = 'standalone';\n\n## Accessing Variables\n\n<i>Since 1.0.0</i>\n\nVariables are part of the flow of each message through the Apigee Edge product.\nAmong other things, they represent the context between the different policies\nthat may affect the message as it flows through Apigee. There are a few\nreasons to access this data from Node.js:\n\n* To gain access to variables that may have been set by Apigee policies that\nran before the Node.js code was invoked.\n\n* To set variables from Node.js that might be used by other Apigee policies\nthat run after the Node.js code.\n\n* To access predefined variables in Apigee Edge that are not available using\nstandard Node.js HTTP request objects, such as timestamps on the message.\n\nFor a complete list of predefined flow variables refer to the Apigee Edge [Variables reference](http://apigee.com/docs/api-services/api/variables-reference). Policy variables are described in the Apigee Edge [Policy Reference](http://apigee.com/docs/content/policy-reference-overview)\n\n### Getting a variable\n\n    var apigee = require('apigee-access');\n    // \"httpRequest\" must be a request object that came from the http module\n    var val1 = apigee.getVariable(request, 'TestVariable');\n    var val2 = apigee.getVariable(request, 'request.client.ip');\n\nThe value may be a string or a number, depending on the type that was\nset using \"setVariable,\" or if the variable is built in to Apigee, depending\non the type of the built-in variable.\n\n### Setting a variable\n\nSome variables are read-only -- an exception will be thrown if you try\nto set one of them.  \n\n    var apigee = require('apigee-access');\n    // \"httpRequest\" must be a request object that came from the http module\n    apigee.setVariable(request, 'TestVariable', 'bar');\n    // This will throw an exception\n    apigee.setVariable(request, 'client.ip', 'Invalid');\n\nFor each variable, the key must be a string. The value may be a number, String,\nboolean, null, or undefined.\n\n### Setting an integer variable\n\n    var apigee = require('apigee-access');\n    // Convert \"123\" to an integer and set it\n    apigee.setIntVariable(request, 'TestVariable', '123');\n    // Use something that's already a number\n    apigee.setIntVariable(request, 'TestVariable2', 42);\n\n\"setIntVariable\" is a convenience method that first coerces \"value\" to an\ninteger, and then sets it. \"value\" must be a string or number.\n\n### Deleting a variable\n\nIt is an error to delete a read-only variable. For a complete list of read-only variables, see the Apigee Edge [Variables Reference](http://apigee.com/docs/api-services/api/variables-reference).\n\n    apigee.deleteVariable(request, 'TestVariable');\n    // This will throw an exception\n    apigee.deleteVariable(request, 'client.ip');\n\n## Pre-Defined Variables Within Apigee Edge\n\nYou can find the link of supported variables at the following\npage. These are the variables that are available when you\ndeploy a Node.js application to Apigee Edge.\n\nYou may of course add your own variables with your own names.\n\nYou can find the complete list of pre-defined variables in the [Variables Reference](http://apigee.com/docs/api-services/api/variables-reference).\n\n## Running Outside Apigee Edge\n\nThis module also works outside of Apigee Edge, but not all the pre-defined\nvariables are supported. This table shows which ones are available.\nThese variables are supported here in order to support local development\nand testing of Node.js applications for Apigee Edge.\n\n\n<table>\n<tr><td><b>Variable</b></td><td><b>Read-Only</b></td><td><b>Type</b></td><td><b>Notes</b></td></tr>\n<tr><td>client.received.start.time</td><td>Yes</td><td>String</td><td>Time at which the request was received</td></tr>\n<tr><td>client.received.end.time</td><td>Yes</td><td>String</td><td>Time at which the request was received</td></tr>\n<tr><td>client.received.start.timestamp</td><td>Yes</td><td>Integer</td><td>Time at which the request was received</td></tr>\n<tr><td>client.received.end.timestamp</td><td>Yes</td><td>Integer</td><td>Time at which the request was received</td></tr>\n</table>\n\nAgain, on the Apigee Edge platform, a much larger set of pre-defined variables is\nsupported -- please refer to the Apigee Edge [Variables Reference](http://apigee.com/docs/api-services/api/variables-reference).\n\nThis module works outside Apigee mainly for testing purposes. Missing a variable\nthat you need for a test? Open a GitHub issue and we can add it, or send a\npull request.\n\n## Determining the Deployment Mode\n\nAs mentioned previously, you can use this module in an application that is\ndeployed to Apigee Edge or in standalone mode on your local machine. To\ndetermine which mode you are running in:\n\n    var apigee = require('apigee-access')\n    console.log('The deployment mode is ' + apigee.getMode());\n\nThe getMode() method returns a string that determines where the module has been\ndeployed.\n\nIf it returns the string \"apigee,\" then the application is running on Apigee\nEdge and all functionality is supported.\n\nIf it returns the string \"standalone,\" then the application is running outside\nthe Apigee Edge environment, and the default functionality described\nat the top of the document takes effect.\n\n## Working with the Cache\n\n<i>Since 1.1.0</i>\n\nThe cache may be used to store strings or data. Like most caches, it is a\nleast-recently-used cache with a maximum size.\n\nInside Apigee Edge, the cache is distributed between all nodes where the Node.js\napplication executes.\n\nConfiguration of the cache is managed via a \"cache resource.\" You can use the\nApigee Edge API to manually create cache resources, or you can use the\ndefault resource.\n\nFor an introduction to caching on Apigee Edge, refer to the  [Persistence](http://apigee.com/docs/gateway-services/content/persistence) documentation topic on the Apigee Edge website.\n\nWhen this module is used outside of Apigee Edge, the cache is stored in memory\ninside Node.js. This support is provided primarily for testing purposes.\n\nThis module provides low-level cache access, and only works on Apigee Edge.\nFor a more comprehensive cache implementation that can work on a variety of\nenvironments, use Volos:\n\n[volos-cache-apigee](https://www.npmjs.org/package/volos-cache-apigee)\n\n### Accessing a cache\n\n    var apigee = require('apigee-access');\n    // Look up the cache named \"cache\" and create it if necessary. The\n    // resulting cache uses a pre-defined set of configuration parameters\n    // that should be workable for most situations.\n    var cache = apigee.getCache('cache');\n    // Get access to a custom cache resource\n    var customCache = apigee.getCache('MyCustomCache',\n      { resource: 'MyCustomrResource'} );\n\nTo use a cache, call \"getCache\". This takes a name, and an optional\nconfiguration object.\n\nThe configuration object may be empty, or it may contain the following\noptional parameters:\n\n* **resource**: The name of an Apigee \"cache resource\" where the data should\nbe stored. Cache resources are used to fine-tune memory allocation and\nother cache parameters. If not\nspecified, a default resource will be used. If the cache resource\ndoes not exist, then an error will be thrown. See below for more documentation\nin this feature.\n\n* **scope**: Specifies whether cache entries are prefixed to prevent collisions.\nValid values are \"global\", \"application,\" and \"exclusive\". These are\ndefined below. The default scope is \"exclusive.\"\n\n* **defaultTtl**: Specifies the default time to live for a cache entry, in\nseconds. If not specified then the default TTL in the cache resource\nwill be used.\n\n* **timeout**: How long to wait to fetch a result from the distributed cache,\nin seconds. The default 30 seconds. Latency-sensitive applications may\nwish to reduce this in order to prevent slow response times if the\ncache infrastructure is overloaded.\n\nFor information about how to create a cache resource, see the Apigee Edge doc topic [Manage Caches for an Environment](http://apigee.com/docs/gateway-services/content/manage-caches-environment).\n\nThe following values are valid for the \"scope\" field:\n\n* **global**: All cache entries may be seen by all Node.js applications in the same\nApigee \"environment.\"\n\n* **application**: All cache entries may be seen by all Node.js caches that\nare part of the same Apigee Edge application.\n\n* **exclusive**: Cache entries are only seen by Node.js caches in the same\napplication that have the same name. This is the default.\n\n### Inserting or Replacing an item\n\n    var apigee = require('apigee-access');\n    var cache = apigee.getCache();\n    // Insert a string with a timeout of 120 seconds\n    cache.put('key2', 'Hello, World!', 120);\n    // Insert a string and get notified when insert is complete\n    cache.put('key4', 'Hello, World!', function(err) {\n      // \"err\" will be undefined unless there was an error on insert\n    });\n\n\"put\" takes four parameters:\n\n* **key** (required): A string that uniquely identifies the item in the cache.\n\n* **data** (required): A string, Buffer, or object that represents the data to cache.\nAny other data type will result in an error. For convenience, objects will\nbe converted into a string using \"JSON.stringify\".\n\n* **ttl** (optional): The maximum time to persist the data in the cache, in\nseconds. If not specified then a default TTL will be used.\n\n* **callback** (optional): If specified, a function that will be called once the\ndata is safely in the cache. It will be called with an Error object as the\nfirst parameter if there is an insertion error, and otherwise it will be\ncalled with no parameters.\n\n### Retrieving an item\n\n    var apigee = require('apigee-access');\n    var cache = apigee.getCache();\n    cache.get('key', function(err, data) {\n      // If there was an error, then \"err\" will be set\n      // \"data\" is the item that was retrieved\n      // It will be a Buffer or a String depending on what was inserted..\n    });\n\n\"get\" takes two parameters:\n\n* **key** (required): A string that uniquely identifies the item in the cache.\n\n* **callback** (required): A function that will be called when the data\nis available.\n\nThe callback must be a function that takes two parameters:\n\nThe first is an error -- if there is an error while retrieving from the\ncache, then an Error object will be set here. Otherwise this parameter\nwill be set to \"undefined\".\n\nThe second is the data retrieved, if any. It will be one of four values:\n\n* If a string was inserted, it will be a string.\n* If a Buffer was inserted, it will be a Buffer.\n* If an object was inserted, it will be a string containing the JSON\nversion of the object as produced by \"JSON.stringify\".\n* If nothing was found, then it will be \"undefined\".\n\n### Invalidating an Item\n\n    var apigee = require('apigee-access');\n    var cache = apigee.getCache();\n    cache.remove('key');\n\nThis method invalidates the key. Like \"put,\" it optionally takes a function\nas the second parameter, which will be called with an Error object\nas the first parameter if there is an error.\n\nOnce a key is invalidated, subsequent \"get\" requests will return\n\"undefined\" unless another value is inserted.\n\n## Using the Secure Store\n\n<i>Since 1.2.0</i>\n\nThe secure store service is a feature of Apigee Edge that allows sensitive\ndata, such as security credentials for back-end services, to be stored in\nencrypted format so that they are protected from unauthorized use.\n\nFor example, the secure store may be used to store a password required by\na Node.js application in order to reach a protected resource, such as a\ndatabase server. The developer of the application can store the password\nin the secure store via API before deployment, and the application can look\nup the value at runtime.\n\nBy doing this, there is therefore no need to include the password in the source\ncode control system, or to deploy it alonside the Node.js source code to Apigee.\nInstead, the value is stored by Apigee in encrypted form and it will only be\nretrieved when the application needs it.\n\nEach Apigee Edge \"organization\" has a set of secure stores, and each environment\nhas an additional store. That way organizations that have different security\nrequirements for different back ends can store different secure values.\n\n### Storing data in the Secure Store by Organization\n\nData is stored in the secure store using the Apigee Edge management API:\n\n    GET /o/{organization}/vaults\n\nRetrieve the names of all the secure stores.\n\n    GET /o/{organization}/vaults/{name}\n\nRetrieve a list of entries (but not their encrypted values) from a named vault.\n\n    GET /o/{organization}/vaults/{name}/entries/{entryname}\n\nRetrieve a single entry (but not its encrypted value).\n\n    POST /o/{organization}/vaults\n\n    { \"name\": \"{name}\" }\n\n    curl https://api.enterprise.apigee.com/v1/o/testorg/vaults\n      -H \"Content-Type: application/json\"\n      -d '{\"name\": \"test2\" }' -X POST\n\nCreate a new vault named \"name\" with no values\n\n    POST /o/{organization}/vaults/{vaultname}/entries\n\n    { \"name\": \"{entryname}\", \"value\": \"{securevalue}\" }\n\n    curl https://api.enterprise.apigee.com/v1/o/testorg/vaults/test2/entries\n      -H \"Content-Type: application/json\"\n      -d '{\"name\": \"value1\", \"value\": \"verysecret\" }' -X POST\n\nPlace a new entry in the vault with the specified name and secure value.\n\n    PUT /o/{organization}/vaults/{vaultname}/entries/{entryname}\n\n    curl https://api.enterprise.apigee.com/v1/o/testorg/vaults/test2/entries/value1\n      -d 'verymoresecret' -X PUT\n\nReplace the value of the specified entry with a new value\n\n    POST /o/{organization}/vaults/{vaultname}/entries/{entryname}?action=verify\n\n    curl https://api.enterprise.apigee.com/v1/o/testorg/vaults/test2/entries/value1?action=verify\n      -d 'verymoresecret'  -X POST\n\nReturn \"true\" if the specified value matches what is already in the store, and\n\"false\" if it does not. In both cases, an HTTP status code of 200 is used.\nThis may be used to validate the contents of the store. Note that once stored,\nthere is no API to retrieve the unencrypted value.\n\n    DELETE /o/{organization}/vaults/{vaultname}/entries/{entryname}\n\nDelete the specified vault entry\n\n    DELETE /o/{organization}/vaults/{name}\n\nDelete the entire vault.\n\n### Storing data by Environment\n\nThe above API may also be invokoed on the \"environment\" path. In that case,\nthe data is qualified by environment. This way, at runtime different\nvalues may be stored depending on where the Node.js script is running:\n\n    GET /o/{organization}/vaults\n    GET /o/{organization}/vaults/{name}\n    GET /o/{organization}/vaults/{name}/entries/{entryname}\n    POST /o/{organization}/vaults\n    POST /o/{organization}/vaults/{vaultname}/entries\n    PUT /o/{organization}/vaults/{vaultname}/entries/{entryname}\n    POST /o/{organization}/vaults/{vaultname}/entries/{entryname}?action=verify\n    DELETE /o/{organization}/vaults/{vaultname}/entries/{entryname}\n    DELETE /o/{organization}/vaults/{name}\n\n### Retrieving values from the Secure Store\n\nThe \"getVault\" method is used to retrieve a particular vault, either per\norganization or based on the current environment where the Node.js code is\nrunning.\n\n\"getVault\" takes two parameters:\n\n* The name of the vault to retrieve.\n* The \"scope,\" which may be \"organization\" or \"environment.\" If not specified,\nthen \"organization\" is assumed.\n\nThe object returned by \"getVault\" has two methods:\n\n* getKeys(callback): Return an array containing the names of all the keys in\nthe specified vault. The \"callback\" function will be called with two\narguments: An error if the operation fails, or \"undefined\" if it does\nnot, and the actual array as the second argument.\n\n* get(key, callback): Return the secure value associated with a particular\nkey. The \"callback\" function will be called with two\narguments: An error if the operation fails, or \"undefined\" if it does\nnot, and the actual value as the second argument.\n\n### Example\n\n    var apigee = require('apigee-access');\n    var orgVault = apigee.getVault('vault1', 'organization');\n    orgVault.get('key1', function(err, secretValue) {\n      // use the secret value here\n    });\n\n## Using the Quota Service\n\n<i>Since 1.2.0</i>\n\nThe quota service is set up to give direct access to the quota service built\nin to Apigee Edge. Here is an example of how it is used:\n\n    var apigee = require('apigee-access');\n    var quota = apigee.getQuota();\n    quota.apply({ identifier: 'Foo', allow: 10, timeUnit: 'hour' },\n                function(err, result) {\n                  console.log('Quota applied: %j', result);\n                });\n\nThe quota service is a low-level object that works only inside Apigee Edge.\nFor a more comprehensive quota implementation that can work in many\nenvironments, use Volos:\n\n[volos-quota-apigee](https://www.npmjs.org/package/volos-quota-apigee)\n\n### Getting access to the Quota object\n\nTo get access to the Quota object, call \"getQuota()\".\n\n### Incrementing the quota\n\nTo increment the quota value, call \"getQuota()\" to get an instance of the Quota\nobject, and then call \"apply.\" The first argument to \"apply\" is an object\nthat may contain the following fields:\n\n* identifier (string, required): A unique identifier of the quota bucket. In\npractice it might be an application ID, IP address, or username.\n* timeUnit (string, required): How long the quota bucket will accumulate until\nif is reset. Valid values are \"minute,\" \"hour,\" \"day,\" \"week,\" and \"month.\"\n* allow (number, required): The maximum value for the quota bucket. This value\nwill be combined with the current value to return whether the quota has succeeded.\n* interval (number, optional): Combined with the \"timeUnit\" to determine how\nlong before the quota is reset. The default is 1. Set to a larger value to allow\nquotas such as \"two hours,\" \"three weeks,\" and so on.\n* weight (number, optional): The value to increment the quota by. Default is 1.\n\nThe second argument to \"apply\" is a function that takes two arguments. The\nfirst will be an Error object if the quota cannot be incremented, or undefined\nif the operation succeeded.\n\nThe second is an object that will contain the following fields:\n\n* used (number): The current value of the quota bucket.\n* allowed (number): The maximum value of the quota bucket before the\nquota is considered to be exceeded. The same value was passed as \"allow\" in\nthe request object.\n* isAllowed (boolean): If there is room left in the quota -- true as long\nas \"used\" is less than or equal to \"allowed.\"\n* expiryTime (long): The timestamp, in milliseconds since 1970 format,\nwhen the quota bucket will be reset.\n* timestamp (long): The timestamp at which the quota was updated.\n\nFor example:\n\n    var apigee = require('apigee-access');\n    var quota = apigee.getQuota();\n\n    // Apply a quota of 100 requests per hour\n    quota.apply({\n      identifier: 'Foo',\n      timeUnit: 'hour',\n      allow: 100\n    }, quotaResult);\n\n    // Apply a quota of 500 requests per five minutes\n    quota.apply({\n      identifier: 'Bar',\n      timeUnit: 'minute',\n      interval: 5,\n      allow: 500\n    }, quotaResult);\n\n    // Increment the quota by a value of 10\n    quota.apply({\n      identifier: 'Foo',\n      timeUnit: 'hour',\n      allow: 100,\n      weight: 10\n    }, quotaResult);\n\n    function quotaResult(err, r) {\n      if (err) { console.error('Quota failed'); }\n    }\n\n### Resetting the quota\n\nTo reset the quota to zero, call \"reset.\" Reset takes an options\nargument, the same as apply, and many of the same parameters:\n\n* identifier (string, required): A unique identifier of the quota bucket. In\npractice it might be an application ID, IP address, or username.\n* timeUnit (string, required): How long the quota bucket will accumulate until\nif is reset. Valid values are \"minute,\" \"hour,\" \"day,\" \"week,\" and \"month.\"\n* interval (number, optional): Combined with the \"timeUnit\" to determine how\nlong before the quota is reset. The default is 1. Set to a larger value to allow\n\nThe second argument is a callback that will have an Error object as the first\nparameter if the reset fails.\n\n### Advanced Usage\n\nWhen creating a quota, an optional \"options\" object may be included. This object\nhas one optional parameter:\n\n* syncInterval (number, optional): The number of seconds that the distributed\nquota implementation syncs its state across the network. The default is 10.\n\nThis parameter may be used to optimize performance of the distributed quota\nacross the network. Keep in mind that a lower setting will degrade performance\nand dramatically increase the latency of the \"apply\" operation. The default\nsetting of 10 seconds is a good setting for many applications.\n\nThe interval may be set as low as zero, which means that the state is\nsynchronized every time \"apply\" is called. Performance will be much, much worse\nin this case.\n\n## Using the OAuth Service\n\n<i>Since 1.2.0</i>\n\nThis module provides a low-level interface for getting access to the OAuth\nservice built in to Apigee Edge. It is fully functional but it is not\ndesigned to be a complete OAuth 2.0 implementation out of the box.\nFor this purpose, use Volos:\n\n[volos-oauth-apigee](https://www.npmjs.org/package/volos-oauth-apigee)\n\nVolos will automatically detect if this module is present and use it for\nbetter OAuth performance when it is available.\n",
  "readmeFilename": "README.md",
  "_id": "apigee-access@1.3.0",
  "_from": "apigee-access@"
}
